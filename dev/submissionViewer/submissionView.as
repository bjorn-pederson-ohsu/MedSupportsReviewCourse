package submissionViewer{	import flash.display.MovieClip;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.display.Shape;	import flash.display.Sprite;	import fl.controls.ComboBox;	import caurina.transitions.Tweener;	import caurina.transitions.properties.DisplayShortcuts;	import caurina.transitions.properties.FilterShortcuts;	import textBuilder.*	import buttonBuild.*;	import videoPlay.*	public class submissionView extends MovieClip {		private var _model:Object;		private var _controller:Object;		private var _xml:XML;		private var dir:textArea		private var questArea:Sprite		private var questBg:Shape		private var bgwidth:int;		private var bgheight:int;		private var r:videoRec		private var v:videoMain		private var redA:goButton		private var saveBut:supportButton		private var redoBut:supportButton		private var saveComp:questionArea		public function submissionView(m:Object,c:Object, xml:XML, i:int, v:int) {			// constructor code			_model = m;			_controller = c;			_xml= new XML(xml)			bgwidth = i;			bgheight = v;			DisplayShortcuts.init();			FilterShortcuts.init();			//trace(stage.stageWidth,stage.stageHeight);			_model.addEventListener(submissionModel.XMLUPDATE,xmlupdate);			addEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			//trace("added to Stage");		}		private function onAddedToStage(event:Event):void {			_controller.setXml(_xml);						removeEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			addEventListener(Event.REMOVED_FROM_STAGE, removeFromStage);		}		private function xmlupdate(event:Event):void {						buildDirections();		}				private function buildDirections():void {			trace(_xml.instructions[0])			dir = new textArea(_xml)			addChild(dir) 			dir.name="directions"			dir.x = (.5*bgwidth)-(.5*dir.width)			dir.y = (.5*bgheight)-(.5*dir.height)			redA = new goButton()			addChild(redA)			redA.name="red arrow"			redA.x = bgwidth-redA.width - 5			redA.y = bgheight - redA.height - 5			redA.addEventListener(goButton.UPDATE, startVideo)		}				private function startVideo(event:Event):void{			r= new videoRec()			addChild(r)			r.x = (.5*bgwidth)-(.5*r.width)			r.y = (.5*bgheight)-(.5*r.height)			r.name="r"			r.alpha=0			r.addEventListener(videoRec.RECDONE, loadViewer);			redA.removeEventListener(goButton.UPDATE, startVideo)			//redA.addEventListener(goButton.UPDATE, continueTest)			Tweener.addTween(r,{time:.4, _autoAlpha:1,transition:"easeOutQuad"})			Tweener.addTween(redA,{time:.3, _autoAlpha:0,transition:"easeOutQuad"})			Tweener.addTween(dir,{_autoAlpha:0,time:.3,transition:"easeOutQuad"});		}				private function loadViewer(event:Event):void{			var i:Number = r.videoId()			v = new videoMain("testing/"+i+"")			addChild(v)			v.name="v"			v.alpha = 0			v.addEventListener(videoMain.SETUP, videoPlaySet) 			Tweener.addTween(r,{time:.4, _autoAlpha:1,transition:"easeOutQuad"})			r.removeEventListener(videoRec.RECDONE, loadViewer)		}				private function videoPlaySet(event:Event):void{			r.closeDown()			removeChild(r)			r=null			v.removeEventListener(videoMain.SHUTDOWN, videoPlaySet) 			v.x = (.5*bgwidth)-(.5*v.vpWidth())			v.y = (.5*height)-(.5*v.vpHeight())			Tweener.addTween(v,{alpha:1,time:.3,transition:"easeOutQuad"});			addButtons()		}				private function continueClick():void{			_controller.startTest()		}		private function addButtons():void {						saveBut = new supportButton("Save", 1) 			addChild(saveBut)			saveBut.name = "saveButton"			saveBut.alpha=0			saveBut.x = v.x			saveBut.y = (v.y+v.height)+10			saveBut.addEventListener(supportButton.UPDATE, update) 			redoBut = new supportButton("Re-Do", 2) 			addChild(redoBut) 			redoBut.name="redoButton"			redoBut.x = (v.x+v.width)-redoBut.width 			redoBut.y = saveBut.y			redoBut.addEventListener(supportButton.UPDATE, update) 			Tweener.addTween(redoBut,{alpha:1,time:.3,transition:"easeOutQuad"});			Tweener.addTween(saveBut,{alpha:1,time:.3,transition:"easeOutQuad"});		}		private function update(event:Event):void {						Tweener.addTween(v,{_autoAlpha:0,time:.3,transition:"easeOutQuad"});			Tweener.addTween(redoBut,{_autoAlpha:0,time:.3,transition:"easeOutQuad"});			Tweener.addTween(saveBut,{_autoAlpha:0,time:.3,transition:"easeOutQuad",onComplete:controlClick,onCompleteParams:[event]});		}				private function controlClick(event:Event):void{						if (event.target.buttonNum==1){				saveComp = new questionArea("Your solution has been saved!", 450, 100, 30)				addChild(saveComp)				saveComp.name = "save message"				saveComp.alpha=0				saveComp.x = (.5*bgwidth)-(.5*450)				saveComp.y = (.5*bgheight)-(.5*100)				Tweener.addTween(saveComp,{alpha:1,time:.3,transition:"easeOutQuad"});			}			if (event.target.buttonNum==2){				buildDirections()			}			v.closeDown()			v=null			saveBut.removeEventListener(supportButton.UPDATE, update)			removeChild(saveBut) 			saveBut=null			redoBut.removeEventListener(supportButton.UPDATE, update)			removeChild(redoBut)			redoBut=null					}				private function removeFromStage(event:Event):void {			/*while (questArea.numChildren>0) {				if (questArea.getChildAt(questArea.numChildren - 1).hasEventListener(questionAreaSelect.UPDATE)) {					questArea.getChildAt(questArea.numChildren - 1).removeEventListener(questionAreaSelect.UPDATE, update) 				}				questArea.removeChild(questArea.getChildAt((questArea.numChildren-1)));			}			removeChild(questArea) 			questArea = null 			redA.removeEventListener(goButton.UPDATE, continueTest)			removeChild(redA);			redA = null;			removeChild(progBar);			progBar = null;			_model.removeEventListener(reflectionModel.XMLUPDATE,xmlupdate);			_model.removeEventListener(reflectionModel.QUESTIONADD,buildQuestion);			_model.removeEventListener(reflectionModel.ANSWERS,testResults);			_model = null;			_controller = null;			_xml = null;*/			removeEventListener(Event.REMOVED_FROM_STAGE, removeFromStage);		}	}}