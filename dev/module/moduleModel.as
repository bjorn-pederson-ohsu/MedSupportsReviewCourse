package module{	import flash.events.Event;	import flash.events.EventDispatcher;	public class moduleModel extends EventDispatcher {		public static var XMLUPDATE:String = 'XMLUpdated';		public static var MENUADD:String = 'menuadd';		public static var SUBMENUADD:String = 'submenuadd';		public static var SUBMENUUPDATE:String = 'submenuupdated';		public static var MAINMENUUPDATE:String = 'mainmenuupdated';		public static var STATECHANGE:String = 'stateChanged';		public static var MODCHANGE:String = 'modChanged';		public static var MODUPDATE:String = 'ModuleUpdated';		private var _modelXml:XML;		public var fullMenu:Array = [];		private var _menuInfo:Array = [];		private var _menuStartx:int;		private var _menuStarty:int;		private var menubuttonwidth:int=171		private var menubuttonheight:int=27		private var _screenWidth:int		private var _screenHieght:int		private var _submenuInfo:Array = [];		private var _submenuStartx:int;		private var _submenuStarty:int;		private var submenubuttonwidth:int=171		private var submenubuttonheight:int=20		public var fullSubMenu:Array = [];		private var oldSubArea:int=0		private var oldMenuArea:int=0		public var subMenuArea:int=0		public var mainMenuArea:int=0		private var _moduleState:int=0		private var _moduleNum:int=0		private var _modLoad:int=0		public function moduleModel() {			// constructor code		}		public function menuCalc(i:int,v:int,j:int):void{			mainMenuArea=j			_screenWidth=i			_screenHieght=v			fullMenu=[]			//_menuStartx=((.5*i)-(.5*(_modelXml.submenu.length()*(menubuttonwidth+5))))			_menuStartx=10			_menuStarty=v-menubuttonheight			menuSet()		}		private function menuSet():void{			for (var i:int=0;i<_modelXml.submenu.length();i++){				_menuInfo=[_modelXml.submenu[i].@name,_menuStartx,_menuStarty]				trace(_menuInfo)				fullMenu[i]=_menuInfo				if (i==0){					_menuStartx=((.5*(_screenWidth))-(.5*((_modelXml.submenu.length()-2)*(menubuttonwidth))))				}				if ((i>0)&&(i<_modelXml.submenu.length()-2)){					_menuStartx+=menubuttonwidth+2								}				if (i==(_modelXml.submenu.length()-2)){					_menuStartx=_screenWidth-menubuttonwidth-10				}			}			dispatchEvent(new Event(moduleModel.MENUADD));		}				private function menuAreaCheck():void{					}		public function subMenuCalc(i:int,v:int,j:int):void{			subMenuArea=j			fullSubMenu=[]			trace("submenu: "+_modelXml.submenu[mainMenuArea].area.length())			_submenuStartx=((.5*i)-(.5*(_modelXml.submenu[mainMenuArea].area.length()*(submenubuttonwidth+2))))			if (mainMenuArea==4){				_submenuStarty=126			}else{			//_submenuStarty=v-menubuttonheight-submenubuttonheight-10			_submenuStarty=126			}			subMenuSet()		}		private function subMenuSet():void{						for (var i:int=0;i<_modelXml.submenu[mainMenuArea].area.length();i++){				_submenuInfo=[_modelXml.submenu[mainMenuArea].area[i].@name,_submenuStartx,_submenuStarty]				trace(_submenuInfo)				fullSubMenu[i]=_submenuInfo				_submenuStartx+=submenubuttonwidth+2			}			dispatchEvent(new Event(moduleModel.SUBMENUADD));		}				public function get xml():XML {			return _modelXml;		}		public function set xml(value:XML):void {			_modelXml = value;			dispatchEvent(new Event(moduleModel.XMLUPDATE));		}		/*public function get returnToMain():int {			return _moduleState;		}*/		public function returnToMain(value:int):void {			trace("from model: "+value)			_moduleState = value;			dispatchEvent(new Event(moduleModel.STATECHANGE));		}		public function get mod():int {			return _moduleNum;		}		public function set mod(value:int):void {			_moduleNum = value;			dispatchEvent(new Event(moduleModel.MODUPDATE));		}				public function changeMenu(i:int):void{			oldMenuArea=mainMenuArea			mainMenuArea=i			oldSubArea=subMenuArea			subMenuArea=0			dispatchEvent(new Event(moduleModel.MAINMENUUPDATE));		}				public function subMenuUpdate(i:int):void {			oldSubArea=subMenuArea			subMenuArea=i			trace(oldSubArea,subMenuArea)			dispatchEvent(new Event(moduleModel.SUBMENUUPDATE));		}		public function returnLanding():void {			dispatchEvent(new Event(moduleModel.MODCHANGE));		}	}}