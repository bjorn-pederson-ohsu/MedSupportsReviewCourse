package module{	import flash.display.Sprite;	import buttonBuild.menuBuilder;	import moduleParts.*;	import flash.events.EventDispatcher;	import flash.events.Event;	import caurina.transitions.Tweener;	import caurina.transitions.properties.DisplayShortcuts;	import buttonBuild.subMenuBuilder;	public class moduleView2 extends Sprite {		private var _model:Object;		private var _controller:Object;		private var moduleNumber:int;		private var menu:menuBuilder;		private var submenu:subMenuBuilder;		private var viewXML:XML;		private var modbg:modulebg;		private var modHead:moduletitle;		private var modArea:Sprite;		private var issue:descriptionBox		private var buttonNum:int;		public function moduleView2(m:Object,c:Object,i:int) {			// constructor code			_model = m;			_controller = c;			moduleNumber = i;			DisplayShortcuts.init();			_model.addEventListener(moduleModel.XMLUPDATE,xmlupdate);			_model.addEventListener(moduleModel.MENUADD,menuadd);			_model.addEventListener(moduleModel.SUBMENUADD,submenuadd);			_model.addEventListener(moduleModel.STATECHANGE,closeDown);			_model.addEventListener(moduleModel.MAINMENUUPDATE,closeDownSubmenu);			_model.addEventListener(moduleModel.MAINMENUUPDATE,addModuleComp);			_model.addEventListener(moduleModel.SUBMENUUPDATE,addModuleComp);			addEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			//trace("added to Stage");		}		private function onAddedToStage(event:Event):void {			_controller.loadXml();			removeEventListener(Event.ADDED_TO_STAGE,onAddedToStage);		}		private function xmlupdate(event:Event):void {			viewXML = new XML(_model.xml);			setmodArea();			setmodTitle();			addIssue(1,0);			_controller.buildMenu(stage.stageWidth,stage.stageHeight,1);			_controller.buildSubMenu(stage.stageWidth,stage.stageHeight,0);		}		private function menuadd(event:Event):void {			for (var i:int = 0; i < _model.fullMenu.length; i++)			{				menu = new menuBuilder(_model.fullMenu[i][0],i,_model.fullMenu.length,_model);				addChild(menu);				menu.name = "menu";				menu.x = _model.fullMenu[i][1];				menu.y = _model.fullMenu[i][2];				menu.addEventListener(menuBuilder.UPDATE,update);				menu.colorChange(_model.mainMenuArea);			}		}		private function submenuadd(event:Event):void {			for (var i:int = 0; i < _model.fullSubMenu.length; i++)			{				submenu = new subMenuBuilder(_model.fullSubMenu[i][0],i,_model.fullSubMenu.length,_model);				addChild(submenu);				submenu.name = "submenu";				submenu.x = _model.fullSubMenu[i][1];				submenu.y = _model.fullSubMenu[i][2];				submenu.addEventListener(subMenuBuilder.UPDATE,update);				trace("submenu active: " + _model.subMenuArea,i);				submenu.colorChange(_model.subMenuArea);			}			displayList();		}		private function setmodArea():void {			modArea = new Sprite  ;			addChild(modArea);			modArea.name = "modArea";			modArea.x = 10;			modArea.y = 125;			modbg = new modulebg  ;			modArea.addChild(modbg);			modbg.name = "modbg";			//addIssue(1,0);		}		private function setmodTitle():void {			modHead = new moduletitle  ;			addChild(modHead);			modHead.name = "modHead";			modHead.x = 130;			modHead.y = 16;			modHead.modTitleText.text = viewXML.title;			modHead.modDescText.text = viewXML.submenu[1].@def;			//modHead.modDescText.wordWrap=true		}		private function addIssue(j:int, i:int):void {			issue= new descriptionBox()			modArea.addChild(issue);			issue.name = "issue";			issue.y = 30			issue.descText.text = viewXML.submenu[j].area[i]			issue.slider.visible = false			if (j==2){				issue.alpha=0			}			if (issue.descText.maxScrollV > 1)			{				issue.slider.visible = true;				issue.slider.maxScrollPosition = issue.descText.textHeight;				issue.x = (.5 * 930) - (.5 * issue.width);			} else			{				issue.x = (.5 * 930) - (.5 * issue.descText.width);			}			modHead.modDescText.text = viewXML.submenu[j].@def;				}			private function displayList():void {			for (var u:int = numChildren-1; u >=0; u--)			{				trace("DisplayList: "+u,getChildAt(u).name);			}		}		private function update(event:Event):void {			trace(event.target.name,event.target.buttonNum);			for (var u:int = modArea.numChildren - 1; u >= 1; u--)			{				trace(u,modArea.getChildAt(u).name,modArea.getChildAt(u).visible);				if (u > 1 && modbg.getChildAt(u).visible == true)				{					Tweener.addTween(modArea.getChildAt(u),{_autoAlpha:0,time:.3,transition:"easeOutQuad"});				} else if (u == 1 && modArea.getChildAt(1).visible == true)				{					Tweener.addTween(modArea.getChildAt(1),{_autoAlpha:0,time:.3,transition:"easeOutQuad",onComplete:controlClick,onCompleteParams:[event]});				} else if (u == 1 && modArea.getChildAt(1).visible == false)				{					controlClick(event);				}			}			//only until all pieces are developed			if (modArea.numChildren == 1)			{				controlClick(event);			}			trace("From module: " + event.target.name);		}		private function controlClick(event:Event):void {			for (var u:int = modArea.numChildren - 1; u >= 1; u--)			{				trace(modArea.getChildAt(u).name);				modArea.removeChildAt(u);				if (u == 1)				{					trace(modArea.numChildren, u);					issue=null					_controller.menuEvent(event);				}			}			//only until all pieces are developed			if (modArea.numChildren == 1)			{				_controller.menuEvent(event);			}		}		private function closeDownSubmenu(event:Event):void {			var n:int = 1;			var t:int = numChildren;			for (var u:int = numChildren - 1; u >= 0; u--)			{				trace(u,getChildAt(u).name);				if (getChildAt(u).name == "submenu")				{					trace(n,_model.fullSubMenu.length);					getChildAt(u).removeEventListener(subMenuBuilder.UPDATE,update);					n++;					if (n == _model.fullSubMenu.length)					{						Tweener.addTween(getChildAt(u),{_autoAlpha:0,time:.3,transition:"easeOutQuad", onComplete:removeSubMenu});					} else					{						Tweener.addTween(getChildAt(u),{_autoAlpha:0,time:.3,transition:"easeOutQuad"});					}				} else if (_model.fullSubMenu.length==0)				{					removeSubMenu();				}			}		}		private function removeSubMenu():void {			var n:int = numChildren - 1;			var t:int = numChildren;			do			{				if (getChildAt(n).name == "submenu")				{					removeChildAt(n);				}				n--;			} while (numChildren>(t-_model.fullSubMenu.length));			_controller.buildSubMenu(stage.stageWidth,stage.stageHeight,0);		}				private function addModuleComp(event:Event):void{			trace ("New Sub Menu Area to be loaded: "+_model.subMenuArea+"\n Main Menu Area to be loaded: "+_model.mainMenuArea)			addIssue(_model.mainMenuArea,_model.subMenuArea)		}		private function closeDown(event:Event):void {			trace(event);			for (var u:int = numChildren - 1; u >= 0; u--)			{				Tweener.addTween(getChildAt(u),{_autoAlpha:0,time:.3,transition:"easeOutQuad"});				if (u == 0)				{					Tweener.addTween(getChildAt(u),{_autoAlpha:0,time:.3,transition:"easeOutQuad",onComplete:removePieces});				}			}		}		private function removePieces():void {			trace("firing removePieces");			_model.removeEventListener(moduleModel.XMLUPDATE,xmlupdate);			_model.removeEventListener(moduleModel.MENUADD,menuadd);			_model.removeEventListener(moduleModel.SUBMENUADD,submenuadd);			_model.removeEventListener(moduleModel.STATECHANGE,closeDown);			_model.removeEventListener(moduleModel.MAINMENUUPDATE,closeDownSubmenu);			var c:int = numChildren - 1;			trace(c);			displayList();			for (c; c >= 0; c--)			{				if (getChildAt(c).name == "menu")				{					getChildAt(c).removeEventListener(menuBuilder.UPDATE,update);					removeChildAt(c)				} else if (getChildAt(c).name == "submenu")				{					getChildAt(c).removeEventListener(subMenuBuilder.UPDATE,update);					trace(getChildAt(c).name+" removes submenu listener");					removeChildAt(c)				} else if (c == 0)				{					removeChildAt(c);					trace("events removed");					_controller.removalComplete();				} else				{					removeChildAt(c);				}			}		}	}}