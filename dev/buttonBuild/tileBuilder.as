package buttonBuild{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.display.MovieClip;	import caurina.transitions.Tweener;	import caurina.transitions.properties.FilterShortcuts;	import flash.events.MouseEvent;	import fl.text.TLFTextField;	import flashx.textLayout.formats.TextLayoutFormat;	public class tileBuilder extends MovieClip {		//private var tween:Tweener		//private var filter:FilterShortcuts		public static var UPDATE:String = 'ButtonClicked';		private var button:tile;		private var buttonTitle:String = "";		private var buttonStatus:String = "";		private var buttonheight:int;		private var buttonwidth:int;		public var buttonNum:int;		public function tileBuilder(s:String,t:String,h:int, w:int, i:int ) {			// constructor code			buttonTitle = s;			buttonStatus = t;			buttonheight = h;			buttonwidth = w;			buttonNum = i;			FilterShortcuts.init();			addEventListener(Event.ADDED_TO_STAGE,tileButtonBuild);		}		private function tileButtonBuild(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE,tileButtonBuild);			button = new tile();			addChild(button);			button.bg.height = buttonheight;			button.bg.width = buttonwidth;			button.buttonLabel.height = buttonheight;			button.buttonLabel.width = buttonwidth;			button.buttonLabel.text = buttonTitle;			if (buttonStatus != "Start")			{				button.bg.goBg.visible = false;			}			if (button.buttonLabel.textWidth > buttonwidth || button.buttonLabel.textHeight > buttonheight)			{				//testTile.buttonLabel.y=(.5*testTile.height)-(.5*testTile.buttonLabel.textHeight);				//testTile.buttonLabel.height=testTile.height-testTile.buttonLabel.y				button.buttonLabel.x = 0;				button.buttonLabel.y = 0;				autosize(button.buttonLabel);			}			button.buttonMode = true;			button.mouseChildren = false;			button.useHandCursor = true;			button.addEventListener(MouseEvent.MOUSE_OVER,buttonOver);			button.addEventListener(MouseEvent.MOUSE_OUT, buttonOut);			button.addEventListener(MouseEvent.MOUSE_DOWN, buttonDown);			button.addEventListener(Event.REMOVED_FROM_STAGE, removedFromStage);		}		private function autosize(txt:TLFTextField):void {			//You set this according to your TextField's dimensions			var maxTextWidth:int = buttonwidth;			var maxTextHeight:int = buttonheight;			trace("from tile Builder width: "+txt.textWidth,maxTextWidth);			trace("from tile Builder height: "+txt.textHeight,maxTextHeight);			var f = txt.getTextFormat();			//decrease font size until the text fits  			while (txt.textWidth > maxTextWidth || txt.textHeight > maxTextHeight) {				f.size = int(f.size) - 1;//5;				txt.setTextFormat(f);			}		}		private function buttonOver(event:MouseEvent):void {			Tweener.addTween(button.bg,{alpha:1,time:.35,_Glow_alpha:.75,_Glow_blurX:15,_Glow_blurY:15,_Glow_color:0xffffff,_Glow_inner:false,transition:"easeOutQuad"});			Tweener.addTween(button.bg,{alpha:1,time:.35,_Glow_alpha:.75,_Glow_blurX:15,_Glow_blurY:15,_Glow_color:0xffffff,_Glow_inner:true,transition:"easeOutQuad"});		}		private function buttonOut(event:MouseEvent):void {			Tweener.addTween(button.bg,{alpha:.75,time:.35,_Glow_alpha:.75,_Glow_blurX:12,_Glow_blurY:12,_Glow_color:0xb2b2ad,_Glow_inner:false,transition:"easeOutQuad"});			Tweener.addTween(button.bg,{alpha:.75,time:.35,_Glow_alpha:0,_Glow_inner:true,transition:"easeOutQuad"});		}		private function buttonDown(event:MouseEvent):void {			dispatchEvent(new Event(tileBuilder.UPDATE));		}		private function removedFromStage(event:Event) {			trace("tile button events removed");			button.removeEventListener(MouseEvent.MOUSE_OVER,buttonOver);			button.removeEventListener(MouseEvent.MOUSE_OUT, buttonOut);			button.removeEventListener(MouseEvent.MOUSE_DOWN, buttonDown);			button.removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStage);			button=null		}	}}