package buttonBuild{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.display.Sprite;	import flash.display.Loader;	import flash.display.Bitmap;	import flash.net.URLRequest;	import caurina.transitions.Tweener;	import caurina.transitions.properties.FilterShortcuts;	import caurina.transitions.properties.ColorShortcuts;	import flash.events.MouseEvent;	public class photoThumb extends Sprite {		//private var tween:Tweener		//private var filter:FilterShortcuts		public static var UPDATE:String = 'ButtonClicked';		//public static var HEIGHTSET:String = 'HieghtSet';		private var locate:String = "";		public var buttonCaption:String = "";		public var buttonNum:int;		public var butHeight:int		private var thumbLoader:Loader;		private var button: Sprite		//private var _model:Object;		public function photoThumb(s:String,i:int,l:String) {			// constructor code			buttonCaption = s;			buttonNum = i;			locate = l;			//_model = m;			FilterShortcuts.init();			ColorShortcuts.init();			addEventListener(Event.ADDED_TO_STAGE,loadThumb);		}		function loadThumb(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE,loadThumb);			//Create a new loader object to load the thumbnail into			thumbLoader = new Loader();			//Fires the thumbLoaded function once the thumbnail is loaded into the thumbLoader object			thumbLoader.contentLoaderInfo.addEventListener(Event.INIT, thumbLoaded);			//Load the new thumbnail by concatenating a string of the folder, the name, and Thumb.jpg;			thumbLoader.load(new URLRequest(String("images/"+locate+"thumb.jpg")));		}		private function thumbLoaded(event:Event):void {			//removeEventListener(Event.ADDED_TO_STAGE,menuButtonBuild);			//_model.addEventListener('submenuupdated',colorChangeSet);			button = new Sprite();			addChild(button);			var thumb:Bitmap = Bitmap(thumbLoader.content);			thumb.smoothing=true			button.addChild(thumb);			butHeight=thumb.height			//trace ("butHeight: "+butHeight)			//button.addChild(thumbLoader)			button.alpha = .5;			button.buttonMode = true;			button.mouseChildren = false;			button.useHandCursor = true;			button.addEventListener(MouseEvent.MOUSE_OVER,buttonOver);			button.addEventListener(MouseEvent.MOUSE_OUT, buttonOut);			button.addEventListener(MouseEvent.MOUSE_DOWN, buttonDown);			button.addEventListener(Event.REMOVED_FROM_STAGE, removedFromStage);		}		private function buttonOver(event:MouseEvent):void {			Tweener.addTween(button,{alpha:1,time:.3,transition:"easeOutQuad"});		}		private function buttonOut(event:MouseEvent):void {			Tweener.addTween(button,{alpha:.5,time:.3,transition:"easeOutQuad"});		}		private function buttonDown(event:MouseEvent):void {			dispatchEvent(new Event(photoThumb.UPDATE));		}		/*private function colorChangeSet(event:Event):void {		trace("subMenuBuilder: "+_model.subMenuArea);		colorChange(_model.subMenuArea);		}		public function colorChange(i:int):void {		if (i == buttonNum)		{		Tweener.addTween(button.frameset,{time:.3,_color:0xffffff,transition:"easeOutQuad"});		Tweener.addTween(button.bg,{alpha:1,_color:0xf8efba,time:.3,transition:"easeOutQuad"});		button.removeEventListener(MouseEvent.MOUSE_OVER,buttonOver);		button.removeEventListener(MouseEvent.MOUSE_OUT, buttonOut);		button.removeEventListener(MouseEvent.MOUSE_DOWN, buttonDown);		button.buttonMode = false;		button.useHandCursor = false;		} else		{		Tweener.addTween(button.bg,{alpha:.5,_color:0xd3c57d,time:.3,transition:"easeOutQuad"});		Tweener.addTween(button.frameset,{time:.3,_color:0xb2ab79,transition:"easeOutQuad"});		button.addEventListener(MouseEvent.MOUSE_OVER,buttonOver);		button.addEventListener(MouseEvent.MOUSE_OUT, buttonOut);		button.addEventListener(MouseEvent.MOUSE_DOWN, buttonDown);		button.buttonMode = true;		button.useHandCursor = true;		}				}*/		private function removedFromStage(event:Event) {			trace(thumbLoader)			button.removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStage);			//_model.removeEventListener('submenuupdated',colorChangeSet);			//button.removeEventListener(_model.MENUUPDATE,colorChange);			//if (_model.subMenuArea != buttonNum)			//{			button.removeEventListener(MouseEvent.MOUSE_OVER,buttonOver);			button.removeEventListener(MouseEvent.MOUSE_OUT, buttonOut);			button.removeEventListener(MouseEvent.MOUSE_DOWN, buttonDown);			button = null;			thumbLoader=null			//}		}	}}