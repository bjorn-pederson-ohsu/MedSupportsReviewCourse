package imageViewer{	import flash.display.MovieClip;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.display.Shape;	import caurina.transitions.Tweener;	import caurina.transitions.properties.DisplayShortcuts;	import buttonBuild.photoThumb;	import buttonBuild.photoBig;	import buttonBuild.arrowBuilder;	import buttonBuild.photoBig;	public class imageView extends MovieClip  {		private var _model:Object;		private var _controller:Object;		private var _xml:XML;		private var thumbHolder:MovieClip;		private var thumbMask:Shape		private var _photo:photoThumb;		private var _photoBig:photoBig		private var up:arrowBuilder;		private var down:arrowBuilder;		private var picHolder:MovieClip		private var picBg:Shape		private var i:int = 0;		private var caption:captionBox;		private var bgwidth:int		private var bgheight:int		public function imageView(m:Object,c:Object, xml:XML, i:int, v:int) {			// constructor code			_model = m;			_controller = c;			bgwidth=i			bgheight=v			_xml = new XML(xml);			DisplayShortcuts.init();			//trace(stage.stageWidth,stage.stageHeight)			_model.addEventListener(imageModel.XMLUPDATE,xmlupdate);			_model.addEventListener(imageModel.GALLERYADD,buildGallery);			_model.addEventListener(imageModel.UPDATEGALL,moveGallery);			addEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			//trace("added to Stage");		}		private function onAddedToStage(event:Event):void {			_controller.setXml(_xml);			removeEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			addEventListener(Event.REMOVED_FROM_STAGE, removeFromStage);		}		private function xmlupdate(event:Event):void {		}		private function buildGallery(event:Event):void {			buildGalleryParts();			buildGalleryPics()		}		private function buildGalleryParts():void {			up = new arrowBuilder("up");			addChild(up);			up.x = bgwidth - up.width - 18;			up.y = 5;			up.name = "upArrow";			up.addEventListener(arrowBuilder.UPDATE,update);			down = new arrowBuilder("down");			addChild(down);			down.x = up.x;			down.y = bgheight - down.height - 5;			down.name = "downArrow";			down.addEventListener(arrowBuilder.UPDATE,update);			var maskHeight:int = (down.y-10)-(up.y + up.height)			thumbHolder= new MovieClip() ;			addChild(thumbHolder);			thumbHolder.name="thumbHolder"			thumbHolder.x=(bgwidth-110) ;			thumbHolder.y = up.y + up.height + 5;			thumbMask = new Shape()			addChild(thumbMask)			thumbMask.name="thumbMask"			thumbMask.x=(bgwidth-110)			thumbMask.y=(up.y + up.height +5)			thumbMask.graphics.beginFill(0x000000,1);			thumbMask.graphics.drawRect(0,0,100,maskHeight);			thumbMask.graphics.endFill()			thumbMask.alpha=.5			trace(maskHeight,thumbMask.height, thumbMask.x, thumbMask.y, (up.y + up.height + 5))			thumbHolder.mask=thumbMask			if (_model.fullGall.length<5){ 				up.visible=false				down.visible=false			}else{				up.visible=false			}			setThumbs();		}		private function setThumbs():void {				_photo = new photoThumb(_model.fullGall[i][1],_model.fullGall[i][0],_model.fullGall[i][2]);				thumbHolder.addChild(_photo);				_photo.x = _model.fullGall[i][3];				_photo.name = "photo" + i;				_photo.addEventListener(photoThumb.UPDATE,update);				_photo.y = _model.fullGall[i][4];				i++;				if (i<_model.fullGall.length){					setThumbs()				}else{									}						}				private function buildGalleryPics():void {			picHolder= new MovieClip()			addChild (picHolder) 			picHolder.name="picHolder"			picHolder.x=10			picHolder.y=10			picBg = new Shape()			var picBgHieght:int = bgheight-20			picHolder.addChild(picBg)			picBg.name="picBg"			picBg.graphics.lineStyle(1, 0xffffff, .3);			picBg.graphics.beginFill(0xffffff,.15);			picBg.graphics.drawRoundRect(0,0,790,picBgHieght,10);			picBg.graphics.endFill()			setPic(0)		}				private function setPic(i:int):void{			trace(_photoBig)			_photoBig = new photoBig(_model.fullGall[i][1],_model.fullGall[i][0],_model.fullGall[i][2])			picHolder.addChild(_photoBig)			_photoBig.alpha=0			Tweener.addTween(_photoBig,{alpha:1,time:.3,transition:"easeOutQuad"})			_photoBig.name="mainPhoto"			caption=new captionBox()			picHolder.addChild(caption)			caption.alpha=0			caption.descText.text=_model.fullGall[i][1]			_photoBig.addEventListener(photoBig.UPDATE, picPlace)		}				private function picPlace(event:Event):void {			_photoBig.removeEventListener(photoBig.UPDATE, picPlace)			_photoBig.y = (.5 * picBg.height)-(.5 * _photoBig.picHeight)			_photoBig.x = (.5 * picBg.width)-(.5 * _photoBig.picWidth)			caption.x = (.5 * picBg.width)-(.5 * caption.width)			caption.y = _photoBig.y+_photoBig.height			Tweener.addTween(caption,{alpha:1,time:.3,transition:"easeOutQuad"})		}		private function update(event:Event):void {			trace(event.target.name,thumbHolder.y );			if (event.target.name=="downArrow"){				_controller.downGallery(thumbHolder.y)			}else			if (event.target.name=="upArrow"){				_controller.upGallery(thumbHolder.y)			}else{				cleanPhoto(event)			}		}				private function moveGallery(event:Event):void {			Tweener.addTween(thumbHolder,{y:_model.newThumbHolderPos,time:.3,transition:"easeOutQuad", onComplete:arrowCheck});					}				private function arrowCheck():void {			/*if (thumbHolder.y < 28 || thumbHolder.y > 28) {				up.visible=true				down.visible=true			}*/			if (thumbHolder.y != 28) {				Tweener.addTween(up,{_autoAlpha:1,time:.3,transition:"easeOutQuad"})				Tweener.addTween(down,{_autoAlpha:1,time:.3,transition:"easeOutQuad"})			}			if(thumbHolder.y==28) {				Tweener.addTween(up,{_autoAlpha:0,time:.3,transition:"easeOutQuad"})			}		}				private function cleanPhoto(event:Event):void {			trace(event.target.buttonNum)			Tweener.addTween(caption,{_autoAlpha:0,time:.3,transition:"easeOutQuad"})			Tweener.addTween(_photoBig,{_autoAlpha:0,time:.3,transition:"easeOutQuad", onComplete: completeClick,onCompleteParams:[event] });		}				private function completeClick(event:Event):void {			picHolder.removeChild(_photoBig)			picHolder.removeChild(caption)			setPic(event.target.buttonNum)		}				private function removeFromStage(event:Event):void{			removeChild(up) 			removeChild(down) 			up=null			down=null			removeChild(thumbMask)			thumbMask=null			while (thumbHolder.numChildren>0){				trace(thumbHolder.numChildren)				thumbHolder.getChildAt((thumbHolder.numChildren-1)).removeEventListener(photoThumb.UPDATE,update)				thumbHolder.removeChild(thumbHolder.getChildAt((thumbHolder.numChildren-1)))			}			removeChild(thumbHolder)			thumbHolder=null			while (picHolder.numChildren>0){				trace(picHolder.numChildren)				picHolder.removeChild(picHolder.getChildAt((picHolder.numChildren-1)))			}			removeChild(picHolder)			_model.removeEventListener(imageModel.XMLUPDATE,xmlupdate);			_model.removeEventListener(imageModel.GALLERYADD,buildGallery);			_model.removeEventListener(imageModel.UPDATEGALL,moveGallery);			_model=null			_controller=null			_xml=null			up=null			down=null		}			}}