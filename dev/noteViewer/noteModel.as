package noteViewer{	import flash.events.Event;	import flash.events.EventDispatcher;	public class noteModel extends EventDispatcher {		public static var XMLUPDATE:String = 'XMLUpdated';		public static var GALLERYADD:String = 'galleryadd';		public static var UPDATEGALL:String = 'updateGallery';		public static var SUBMENUUPDATE:String = 'submenuupdated';		public static var MAINMENUUPDATE:String = 'mainmenuupdated';		public static var STATECHANGE:String = 'stateChanged';		public static var MODCHANGE:String = 'modChanged';		public static var MODUPDATE:String = 'ModuleUpdated';		public var _noteXml:XML;		private var _stageWidth:int;		private var _stageHieght:int;		private var _noteSection:int = 0 		public var fullGall:Array = [];		private var indiThumb:Array = [];		private var totalThumbs:int = 0;		private var numSections:int = 0;		public var gallLength:int = 0 		private var viewGallLength:int = 398		private var currentThumbHolderPos:int=0		public var newThumbHolderPos:int=0		private var thumbPadding:int = 5;		private var thumbStartx:int = 0;		private var thumbStarty:int = 0;		public function noteModel() {			// constructor code		}		public function setXml(xml:XML):void {			_noteXml = new XML(xml);			totalThumbs = _noteXml.area[_noteSection].note.length();			galleryBuild();			dispatchEvent(new Event(noteModel.XMLUPDATE));		}		public function galleryBuild():void {			indiThumb = []			fullGall = []			totalThumbs = _noteXml.area[_noteSection].note.length();			for (var i:int=0; i<totalThumbs; i++)			{				indiThumb = [i,_noteXml.area[_noteSection].note[i]. @ content];				fullGall[i] = indiThumb;			}			//galleryLength()			trace ("From Model: "+fullGall.length, _noteSection)			dispatchEvent(new Event(noteModel.GALLERYADD));		}				public function galleryLength(i:int):void {			numSections = Math.ceil(i/viewGallLength)			gallLength = thumbStarty		}				public function moveGallery(s:String,i:int):void {			currentThumbHolderPos=i			if (s=="down") {				newThumbHolderPos=currentThumbHolderPos-viewGallLength				if (newThumbHolderPos<-1*(viewGallLength*(numSections-1))){					newThumbHolderPos=28				}			}			if (s=="up") {				newThumbHolderPos=currentThumbHolderPos+viewGallLength				if (newThumbHolderPos>(viewGallLength*(numSections-1))){					newThumbHolderPos=28				}			}			dispatchEvent(new Event(noteModel.UPDATEGALL));		}				public function sectionChange(i:int):void{			_noteSection = i			trace("From Model: " +_noteSection)			galleryBuild()		}			}}