package textBuilder{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.display.Sprite;	import flash.display.Shape;	import caurina.transitions.Tweener;	import caurina.transitions.properties.FilterShortcuts;	import caurina.transitions.properties.ColorShortcuts;	import flash.events.MouseEvent;	import flashx.textLayout.compose.StandardFlowComposer;	import flashx.textLayout.container.ContainerController;	import flashx.textLayout.elements.ParagraphElement;	import flashx.textLayout.elements.SpanElement;	import flashx.textLayout.elements.TextFlow;	import flashx.textLayout.formats.*;	import flashx.textLayout.conversion.TextConverter;	import flashx.textLayout.edit.SelectionManager;	public class questionArea extends Sprite {		private var _textFlow:TextFlow;		private var txt:String;		private var textSpace:Sprite;		private var textHeight:int;		private var h:int;		private var w:int;		private var fontSize:int		private var cont:ContainerController;		public function questionArea(s:String, i:int, j:int, t:int) {			txt = new String(s);			w = i;			h = j;			fontSize=t			//trace(txtXML);			addEventListener(Event.ADDED_TO_STAGE,buildTextSpace);		}		private function buildTextSpace(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE,buildTextSpace);			addEventListener(Event.REMOVED_FROM_STAGE, removedFromStage);			drawSpace();		}		private function drawSpace():void {			//if (getChildByName=="sl")			/*textSpace = new Sprite ();			addChild(textSpace);*/			textSpace = new Sprite ();			addChild(textSpace);			beginFlow(txt);		}		private function beginFlow(s:String):void {			_textFlow = new TextFlow();			_textFlow.flowComposer = new StandardFlowComposer();			_textFlow = TextConverter.importToFlow(s,TextConverter.PLAIN_TEXT_FORMAT);			_textFlow.textAlign = TextAlign.LEFT;			_textFlow.verticalAlign = VerticalAlign.MIDDLE;			_textFlow.fontFamily = "Segoe UI";			_textFlow.fontLookup = "embeddedCFF";			_textFlow.fontSize = fontSize;			cont = new ContainerController(textSpace,(w),(h));			_textFlow.flowComposer.addController(cont);			_textFlow.interactionManager = new SelectionManager();			_textFlow.flowComposer.updateAllControllers();		}		private function removedFromStage(event:Event):void {			trace("textArea removed");			_textFlow.flowComposer = null;			_textFlow = null			;			cont=null			;		}	}}