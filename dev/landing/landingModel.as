package landing{	import flash.events.Event;	import flash.events.EventDispatcher;	public class landingModel extends EventDispatcher {		public static var XMLUPDATE:String = 'XMLUpdated';		public static var MODUPDATE:String = 'ModuleUpdated';		public static var STATECHANGE:String = 'stateChanged';		public static var MODCHANGE:String = 'modChanged';		public static var TILEUPDATE:String = 'TileUpdated';		private var _modelXml:XML;		private var _moduleNum:int = 0;		private var _moduleState:String = "";		private var _modLoad:int;		private var modNumofTile:uint = 5;		private var modtilex:int = 10;		private var modtiley:int = 520;		private var modtilewidth:int = 166;		private var modtileheight:int = 109;		private var modtilepadding:int = 25;		private var modtileholdermax:int = 0;		//private var stageWidth:int = 0;		//private var paddingmin = 60;		private var totaltileWidth:uint;		private var totalpadding:uint;		public var fullBar:Array = [];		private var buttonSet:Array = [0,0,0,0,"title"];		public function landingModel():void {		}		public function tileCalc(i:uint,v:uint):void {			modNumofTile = i;			modtileholdermax=(v-20);			if (modNumofTile > 5 && modNumofTile <= 7)			{				modtileheight = .75 * modtileheight;				modtilewidth = .75 * modtilewidth;				totaltileWidth=(modNumofTile*modtilewidth);				totalpadding = modtileholdermax - totaltileWidth;				modtilepadding=(1/(modNumofTile-1))*totalpadding;				//trace(modNumofTile,modtileholdermax);				bignum();			} else if (modNumofTile>7)			{				modtiley=505				modtileheight = .75 * modtileheight;				modtilewidth = .75 * modtilewidth;				modtilepadding = 10;				setValues();			} else			{				totaltileWidth=(modNumofTile*modtilewidth);				totalpadding = modtileholdermax - totaltileWidth;				modtilepadding=(1/(modNumofTile-1))*totalpadding;				setValues();			}		}		private function bignum():void {			//var totaltileWidth:uint=(modNumofTile*modtilewidth);			//var totalpadding:uint=((modNumofTile-1)*modtilepadding);			var holderWidth:uint = totaltileWidth + totalpadding;			//trace("Starting Values: "+totaltileWidth,totalpadding);			if (holderWidth > modtileholdermax)			{				totalpadding +=  -1;				//trace("working values: "+totaltileWidth,totalpadding);				if (holderWidth > modtileholdermax)				{					bignum();				}			} else			{				setValues();			}		}		private function setValues():void {			//trace("finish values: "+modtileheight,modtilepadding);			for (var j:int=0; j<modNumofTile; j++)			{				buttonSet = [modtileheight,modtilewidth,modtilex,modtiley,_modelXml.module[j].title];				fullBar[j] = buttonSet;				//trace("length of array: "+fullBar.length)				modtilex +=  modtilewidth + modtilepadding;				//trace(modtilex);				if (modtilex >= modtileholdermax)				{					//trace("adjusting");					modtiley +=  modtileheight + 5;					modtilex = 10;					//trace("adjusted: "+modtilex, modtiley);				}				//trace(j);			}			dispatchEvent(new Event(landingModel.TILEUPDATE));		}		//Getters and setters		public function get xml():XML {			return _modelXml;		}		public function set xml(value:XML):void {			_modelXml = value;			dispatchEvent(new Event(landingModel.XMLUPDATE));		}		public function get mod():int {			return _moduleNum;		}		public function set mod(value:int):void {			_moduleNum = value;			dispatchEvent(new Event(landingModel.MODUPDATE));		}		public function get modState():String {			return _moduleState;		}		public function set modState(value:String):void {			_moduleState = value;			dispatchEvent(new Event(landingModel.STATECHANGE));		}		public function get loadModule():int {			return _modLoad;		}		public function set loadModule(value:int):void {			_modLoad = value;			dispatchEvent(new Event(landingModel.MODCHANGE));		}	}}