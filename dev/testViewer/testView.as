package testViewer{	import flash.display.MovieClip;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.display.Shape;	import flash.display.Sprite;	import fl.controls.ComboBox;	import caurina.transitions.Tweener;	import caurina.transitions.properties.DisplayShortcuts;	import caurina.transitions.properties.FilterShortcuts;	import textBuilder.*;	import buttonBuild.goButton;	public class testView extends MovieClip {		private var _model:Object;		private var _controller:Object;		private var _xml:XML;		private var q:questionArea		private var ans:questionAreaSelect		private var dir:textArea		private var progBar:progressArea		private var redA:goButton		private var questArea:Sprite		private var questBg:Shape		private var bgwidth:int;		private var bgheight:int;		public function testView(m:Object,c:Object, xml:XML, i:int, v:int) {			// constructor code			_model = m;			_controller = c;			_xml= new XML(xml)			bgwidth = i;			bgheight = v;			DisplayShortcuts.init();			FilterShortcuts.init();			//trace(stage.stageWidth,stage.stageHeight);			_model.addEventListener(testModel.XMLUPDATE,xmlupdate);			_model.addEventListener(testModel.QUESTIONADD,buildQuestion);			_model.addEventListener(testModel.ANSWERS,testResults);			addEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			//trace("added to Stage");		}		private function onAddedToStage(event:Event):void {			_controller.setXml(_xml);						removeEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			addEventListener(Event.REMOVED_FROM_STAGE, removeFromStage);		}		private function xmlupdate(event:Event):void {						buildDirections();			//buildGalleryPics();		}				private function buildDirections():void {			trace(_xml.instructions[0])			dir = new textArea(_xml.instructions[0])			addChild(dir) 			dir.name="directions"			dir.x = (.5*bgwidth)-(.5*dir.width)			dir.y = (.5*bgheight)-(.5*dir.height)			redA = new goButton()			addChild(redA)			redA.name="red arrow"			redA.x = bgwidth-redA.width - 5			redA.y = bgheight - redA.height - 5			redA.addEventListener(goButton.UPDATE, startTest)					}		private function startTest(event:Event):void{			progBar = new progressArea(_model)			progBar.name="progress bar"			addChild(progBar) 			progBar.x = (.5*bgwidth)-(.5*progBar.width)			progBar.y = bgheight - progBar.height - 5			progBar.alpha = 0 			questArea= new MovieClip()			addChild (questArea) 			questArea.name="questArea"			questArea.x=10			questArea.y=10			questBg = new Shape()			var questBgHieght:int = bgheight-20			questArea.addChild(questBg)			questBg.name="questBg"			questBg.graphics.lineStyle(1, 0xffffff, .3);			questBg.graphics.beginFill(0xffffff,.15);			questBg.graphics.drawRoundRect(0,0,bgwidth-20,questBgHieght,10);			questBg.graphics.endFill()			questArea.alpha=0			redA.removeEventListener(goButton.UPDATE, startTest)			redA.addEventListener(goButton.UPDATE, continueTest)			Tweener.addTween(progBar,{time:.3, alpha:1,transition:"easeOutQuad"})			Tweener.addTween(redA,{time:.3, _autoAlpha:0,transition:"easeOutQuad"})			Tweener.addTween(dir,{_autoAlpha:0,time:.3,transition:"easeOutQuad", onComplete:continueClick});		}				private function continueClick():void{			_controller.startTest()		}		private function buildQuestion(event:Event):void {						var currentQuestion:int = _model.numberQuestion()			q = new questionArea(_xml.question[currentQuestion].@ text, questBg.width-20, 100, 30)			questArea.addChild(q) 			q.name="question: "+_xml.question[currentQuestion].@ text			q.x=10			q.y=20			var setY:int = 125			var setX:int = 165			for (var j:int=0; j<_model.answerSet.length; j++){				trace (j)				ans = new questionAreaSelect(_model.answerSet[j][1], 600, 50,20, _model.answerSet[j][2])				questArea.addChild(ans) 				ans.x=setX				ans.y=setY				ans.name="Answer: "+_model.answerSet[j][1]				setY = setY+ans.height + 30 				ans.addEventListener(questionAreaSelect.UPDATE, update) 			}			Tweener.addTween(questArea,{time:.3, alpha:1,transition:"easeOutQuad"})			//displayList()					}		private function displayList():void {			for (var u:int = numChildren-1; u >=0; u--)			{				trace("Everything on: "+u,getChildAt(u).name,getChildAt(u).x,getChildAt(u).y, getChildAt(u).alpha);			}		}		private function update(event:Event):void {						for (var u:int = questArea.numChildren - 1; u >= 1; u--)			{				if (questArea.getChildAt(u).hasEventListener(questionAreaSelect.UPDATE)) {					questArea.getChildAt(u).removeEventListener(questionAreaSelect.UPDATE, update) 				}				trace(u,questArea.getChildAt(u).name,questArea.getChildAt(u).visible, questArea.getChildAt(u).hasEventListener(questionAreaSelect.UPDATE));				if (u > 1 && questArea.getChildAt(u).visible == true)				{					Tweener.addTween(questArea.getChildAt(u),{_autoAlpha:0,time:.3,transition:"easeOutQuad"});									} else if (u == 1 && questArea.getChildAt(1).visible == true)				{					Tweener.addTween(questArea.getChildAt(1),{_autoAlpha:0,time:.3,transition:"easeOutQuad",onComplete:controlClick,onCompleteParams:[event]});				} else if (u == 1 && questArea.getChildAt(1).visible == false)				{					controlClick(event);				}			}					}				private function controlClick(event:Event):void{			for (var u:int = questArea.numChildren - 1; u >= 1; u--)			{				trace(questArea.getChildAt(u).name);				questArea.removeChildAt(u);				if (u == 1)				{					trace(questArea.numChildren, u);					_controller.answerCheck(event.target.buttonNum)				}			}		}		private function continueTest(event:Event):void{					}				private function testResults (event:Event):void {			var f:questionArea = new questionArea(_model.testOut(), 250, 100, 30)			questArea.addChild(f) 			f.alpha=0			f.x = (.5*questArea.width)-(.5*f.width)			f.y = (.5*questArea.height)-(.5*f.height)			Tweener.addTween(f,{alpha:1,time:.3,transition:"easeOutQuad"});		}				private function removeFromStage(event:Event):void {			/*while (questArea.numChildren>0) {				if (questArea.getChildAt(questArea.numChildren - 1).hasEventListener(questionAreaSelect.UPDATE)) {					questArea.getChildAt(questArea.numChildren - 1).removeEventListener(questionAreaSelect.UPDATE, update) 				}				questArea.removeChild(questArea.getChildAt((questArea.numChildren-1)));			}			removeChild(questArea) 			questArea = null*/			while (numChildren>2) {								if (getChildAt(numChildren - 1).name == "progress bar"){					removeChild(progBar);					progBar = null;				}				if (getChildAt(numChildren - 1).name == "questArea"){					while (questArea.numChildren>0) {						if (questArea.getChildAt(questArea.numChildren - 1).hasEventListener(questionAreaSelect.UPDATE)) {							questArea.getChildAt(questArea.numChildren - 1).removeEventListener(questionAreaSelect.UPDATE, update) 							}						questArea.removeChild(questArea.getChildAt((questArea.numChildren-1)));						}					removeChild(questArea) 					questArea = null				}							}			if (redA.hasEventListener(goButton.UPDATE)) {					redA.removeEventListener(goButton.UPDATE, continueTest)					redA.removeEventListener(goButton.UPDATE, startTest)				}						removeChild(redA);			redA = null;			removeChild(dir)			dir=null			_model.removeEventListener(testModel.XMLUPDATE,xmlupdate);			_model.removeEventListener(testModel.QUESTIONADD,buildQuestion);			_model.removeEventListener(testModel.ANSWERS,testResults);			_model = null;			_controller = null;			_xml = null;			//displayList()			removeEventListener(Event.REMOVED_FROM_STAGE, removeFromStage);		}	}}